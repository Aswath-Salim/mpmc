#include <stdio.h>

// Structure to represent a process
typedef struct {
    int id;
    int burst_time;
    int arrival_time;
    int priority;
    int waiting_time;
    int turnaround_time;
    int completed;
} Process;

void calculate_waiting_time(Process processes[], int n) {
    int current_time = 0;
    int completed_processes = 0;

    while (completed_processes < n) {
        int highest_priority_index = -1;
        int highest_priority = -1; // A large number to start with

        for (int i = 0; i < n; ++i) {
            if (processes[i].arrival_time <= current_time && !processes[i].completed) {
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    highest_priority_index = i;
                }
            }
        }

        if (highest_priority_index == -1) {
            printf("No process available at time %d\n", current_time);
            current_time++;
        } else {
            processes[highest_priority_index].waiting_time = current_time - processes[highest_priority_index].arrival_time;
            current_time += processes[highest_priority_index].burst_time;
            processes[highest_priority_index].turnaround_time = current_time - processes[highest_priority_index].arrival_time;
            processes[highest_priority_index].completed = 1;
            completed_processes++;
        }
    }
}

void display_table(Process processes[], int n) {
    printf("Process\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].arrival_time,
               processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input process details
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Enter the arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].completed = 0;
        processes[i].waiting_time = 0;
    }

    calculate_waiting_time(processes, n);

    // Calculate average waiting time and turnaround time
    float total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; ++i) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);

    // Display process table
    display_table(processes, n);

    return 0;
}
