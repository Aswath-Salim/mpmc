#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
};

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n]; // Array to store processes

    // Reading process details from the user
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; ++i) {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        processes[i].processID = i + 1;
    }

    // Sorting processes based on arrival time (if not given in ascending order)
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                // Swap the processes
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate completion time, turnaround time, and waiting time
    int completionTime = 0;
    float totalTurnaroundTime = 0;
    float totalWaitingTime = 0;

    printf("\nProcess Execution Order:\n");
    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; ++i) {
        if (processes[i].arrivalTime > completionTime)
            completionTime = processes[i].arrivalTime;
        completionTime += processes[i].burstTime;

        // Calculate turnaround time and waiting time
        int turnaroundTime = completionTime - processes[i].arrivalTime;
        int waitingTime = turnaroundTime - processes[i].burstTime;

        totalTurnaroundTime += turnaroundTime;
        totalWaitingTime += waitingTime;

        // Display process details
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", processes[i].processID, processes[i].arrivalTime, 
               processes[i].burstTime, completionTime, turnaroundTime, waitingTime);
    }

    // Calculate average turnaround time and average waiting time
    float avgTurnaroundTime = totalTurnaroundTime / n;
    float avgWaitingTime = totalWaitingTime / n;
    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}
